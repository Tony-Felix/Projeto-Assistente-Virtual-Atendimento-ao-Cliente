import os
import time
import google.generativeai as genai
import gradio as gr
from google.api_core.exceptions import InvalidArgument
from service_functions import (
    atualizar_status_pedido,
    registrar_reclamacao,
    gerar_cupom_desconto
)

genai.configure(api_key=os.environ["GEMINI_API"])

model_if_magic = genai.GenerativeModel(
    "gemini-1.5-flash",
    generation_config={"temperature": 0.3},
    tools=[atualizar_status_pedido, registrar_reclamacao, gerar_cupom_desconto]
)

chat = model_if_magic.start_chat()


def ia_decision():
    business_rules = """
      Atue como um assistente virtual que possa Responder perguntas dos
      clientes sobre produtos, pedidos e pol√≠ticas de uma loja online de
      eletr√¥nicos. Voc√™ pode Processar arquivos enviados pelos clientes,
      como comprovantes de pagamento ou imagens de produtos com defeito.
      Tambem pode realizar a√ß√µes espec√≠ficas chamando fun√ß√µes internas,
      como atualizar o status de um pedido, gerar um cupom de desconto ou
      registrar uma reclama√ß√£o sobre um produto. Voc√™ deve decidir quando
      chamar as fun√ß√µes com base nas intera√ß√µes com o cliente.
      Voc√™ deve seguir as seguintes regras ao interagir com os clientes:
    1. Consulta de Pedidos:
    Se o cliente perguntar sobre o status de um pedido, a voc√™ deve fornecer
    as informa√ß√µes correspondentes. Se necess√°rio, chamar a fun√ß√£o
    atualizar_status_pedido para atualizar o status.
    2. Reclama√ß√µes sobre Produtos:
    Se o cliente enviar uma imagem de um produto com defeito, a voc√™ deve
    registrar a reclama√ß√£o, chamar a fun√ß√£o registrar_reclamacao e fornecer um
    n√∫mero de protocolo ao cliente.
    3. Oferecer Descontos:
    Se o cliente for recorrente ou estiver insatisfeito, voc√™ pode oferecer um
    cupom de desconto. Chamar a fun√ß√£o gerar_cupom_desconto e enviar o c√≥digo
    ao cliente.
    4. Pol√≠ticas da Loja:
    Voc√™ deve ser capaz de responder perguntas sobre pol√≠ticas de devolu√ß√£o,
    troca, etc.
    5. Mensagens de Erro ou N√£o Compreens√£o:
    Se voc√™ n√£o entender a solicita√ß√£o, deve pedir esclarecimentos ao cliente.
    N√£o minta ou finja que chamou as fun√ß√µes. Sempre chame as fun√ß√µes se
    parecer que deve.
    """
    response = chat.send_message(
        f"Regras de neg√≥cio: {business_rules}"
    )
    # Mensagem adicional para incentivar a reflex√£o da IA
    chat.send_message(
        "Se ao interagir com um cliente n√£o tiver chamado nenhuma fun√ß√£o, "
        "reflita se deve faz√™-lo ou n√£o. Lembre-se que voc√™ √© um assistente"
        "virtual que pode responder perguntas e chamar as fun√ß√µes adequadas "
        "para cada usuario.."
    )
    # Retorna a resposta da IA
    return response.text


ia_decision()


# Faz o upload dos arquivos enviados pelo usu√°rio
def upload_files(message):
    uploaded_files = []
    if message["files"]:
        for file_gradio_data in message["files"]:
            uploaded_file = genai.upload_file(file_gradio_data["path"])
            while uploaded_file.state.name == "PROCESSING":
                time.sleep(5)
                uploaded_file = genai.get_file(uploaded_file.name)
            uploaded_files.append(uploaded_file)
    return uploaded_files


# Monta o prompt com a mensagem e os arquivos enviados
def assemble_prompt(message):
    prompt = [message["text"]]
    uploaded_files = upload_files(message)
    prompt.extend(uploaded_files)
    return prompt


# Wrapper para integrar o chat com o Gradio
def gradio_wrapper(message, _history):
    prompt = assemble_prompt(message)
    try:
        response = chat.send_message(prompt)
    except InvalidArgument as e:
        response = chat.send_message(
            f"O usu√°rio te enviou um arquivo para voc√™ ler e obteve o erro: "
            f"{e}. Pode explicar o que houve e dizer quais tipos de "
            "arquivos voc√™ d√° suporte? Assuma que a pessoa n√£o sabe "
            "programa√ß√£o e n√£o quer ver o erro original. Explique de forma "
            "simples e concisa."
        )
    return response.text


# Crie e lance a interface do chat com suporte a arquivos
chat_interface = gr.ChatInterface(
    fn=gradio_wrapper, title="Chatbot! üìû customer service üí¨", multimodal=True
)
# Inicie a interface
chat_interface.launch(server_name="127.0.0.1", server_port=7860)
